pipeline {
  agent any

  options {
    buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')
    disableConcurrentBuilds()
  }

  triggers {
    GenericTrigger (
      genericVariables: [
        [key: 'ref', value: '$.ref', defaultValue: 'refs/head/develop'],
        [key: 'isGoingToDeploy', value: '$.pull_request.merged', defaultValue: 'false'],
        [key: 'action', value: '$.action', defaultValue: '']
      ],
      token: 'proesc-backend'
    )
  }

  stages {
    stage('Checkout SCM') {
      steps {
        checkout([
          $class: 'GitSCM',
          branches: [[name: '*/develop'], [name: '*/release*'], [name: '*/main']],
          extensions: [[$class: 'CleanCheckout']],
          doGenerateSubmoduleConfigurations: false,
          submoduleCfg: [],
          userRemoteConfigs: [[credentialsId: 'proesc-ssh-key', url: 'git@github.com:matheus-dr/test-multibranch.git']]
        ])
      }
    }

    stage('Dev Environment') {
      steps {
        build job: 'proesc-backend/ci-dev',
          parameters: [booleanParam(name: 'isGoingToDeploy', value: isGoingToDeploy)],
          wait: false,
          propagate: false
      }

      when {
        expression {
          return ref == 'refs/head/develop' && (action == '' || (action == 'opened' || action == 'merged'))
        }
      }
    }

    stage('Qa Environment') {
      steps {
        // TODO: Change job to correct pipeline
        build job: 'proesc-backend/ci-dev',
          parameters: [booleanParam(name: 'isGoingToDeploy', value: isGoingToDeploy)],
          wait: false,
          propagate: false
      }

      when {
        expression {
          return ref ==~ /refs\/head\/release.*$/ && (action == '' || (action == 'opened' || action == 'merged'))
        }
      }
    }

    stage('Prod Environment') {
      steps {
        // TODO: Change job to correct pipeline
        build job: 'proesc-backend/ci-dev',
          parameters: [booleanParam(name: 'isGoingToDeploy', value: isGoingToDeploy)],
          wait: false,
          propagate: false
      }

      when {
        expression {
          return ref == 'refs/head/main' && (action == '' || (action == 'opened' || action == 'merged'))
        }
      }
    }
  }
}