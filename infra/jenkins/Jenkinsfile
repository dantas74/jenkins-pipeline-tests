pipeline {
  agent any

  options {
    buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')
    disableConcurrentBuilds()
  }

  triggers {
    GenericTrigger (
      genericVariables: [
        [key: 'pushRef', value: '$.ref', defaultValue: ''],
        [key: 'baseRef', value: '$.pull_request.base.ref', defaultValue: ''],
        [key: 'headRef', value: '$.pull_request.head.ref', defaultValue: ''],
        [key: 'mergeIsGoingToDeploy', value: '$.pull_request.merged', defaultValue: ''],
        [key: 'isMergeable', value: '$.pull_request.mergeable', defaultValue: ''],
        [key: 'mergeAction', value: '$.action', defaultValue: '']
      ],
      token: 'proesc-backend'
    )
  }

  stages {
    stage('Checkout SCM') {
      steps {
        checkout([
          $class: 'GitSCM',
          branches: [
            [name: '*/develop'],
            [name: '*/release*'],
            [name: '*/main'],
            [name: '*/feature*'],
            [name: '*/hotfix*'],
            [name: '*/bugfix*']
          ],
          extensions: [[$class: 'CleanCheckout']],
          doGenerateSubmoduleConfigurations: false,
          submoduleCfg: [],
          userRemoteConfigs: [[credentialsId: 'proesc-ssh-key', url: 'git@github.com:matheus-dr/test-multibranch.git']]
        ])
      }
    }

    stage('Setup') {
      steps {
        script {
          // Defining vars to use in script
          def mergeIsGoingToDeploy = env.mergeIsGoingToDeploy
          def baseRef = env.baseRef
          def headRef = env.headRef
          def pushRef = env.pushRef
          def action = env.mergeAction          

          // Checking if is going to deploy based on merge or push
          env.isGoingToDeploy = mergeIsGoingToDeploy ?: pushRef ==~ /^refs\/heads\/(develop|release|main).*$/

          // Validation of auxiliary branches
          env.auxiliaryCi = (
            headRef ==~ /^(feature|hotfix|bugfix).*$/ && (action == 'opened' || action == 'reopened')
          )

          // Validation of dev environment
          env.devCiCd = (
            baseRef == 'develop' && env.isGoingToDeploy.toBoolean()
          ) || (pushRef == 'refs/heads/develop') || (
            headRef ==~ /^(feature|hotfix|bugfix).*$/ && action == 'closed' && env.isGoingToDeploy
          )

          // Validation of qa environment
          env.qaCiCd = (
            baseRef ==~ /release.*$/ && env.isGoingToDeploy.toBoolean()
          ) || (pushRef ==~ /refs\/heads\/release.*$/)

          // Validation of prod environment
          env.prodCiCd = (
            baseRef == 'main' && env.isGoingToDeploy.toBoolean()
          ) || (pushRef == 'refs/heads/main') || (
            headRef ==~ /^hotfix.*$/ && action == 'closed' && env.isGoingToDeploy
          )
        }
      }
    }

    stage('Auxiliary branch') {
      steps {
        build job: 'proesc-backend/ci-auxiliary',
          parameters: [string(name: 'branchName', value: headRef)],
          wait: false,
          propagate: false
      }

      when {
        expression {
          return env.auxiliaryCi.toBoolean()
        }
      }
    }

    stage('Dev Environment') {
      steps {
        build job: 'proesc-backend/ci-dev',
          parameters: [booleanParam(name: 'isGoingToDeploy', value: isGoingToDeploy)],
          wait: false,
          propagate: false
      }

      when {
        expression {
          return env.devCiCd.toBoolean()
        }
      }
    }

    stage('Qa Environment') {
      steps {
        // TODO: Change job to correct pipeline and environment
        build job: 'proesc-backend/ci-dev',
          parameters: [booleanParam(name: 'isGoingToDeploy', value: isGoingToDeploy)],
          wait: false,
          propagate: false
      }

      when {
        expression {
          return env.qaCiCd.toBoolean()
        }
      }
    }

    stage('Prod Environment') {
      steps {
        // TODO: Change job to correct pipeline and environment
        build job: 'proesc-backend/ci-dev',
          parameters: [booleanParam(name: 'isGoingToDeploy', value: isGoingToDeploy)],
          wait: false,
          propagate: false
      }

      when {
        anyOf {
          expression {
            return env.prodCiCd.toBoolean()
          }
        }
      }
    }
  }

  post {
    success {
      sh '''
        set +x
        curl "https://api.GitHub.com/repos/matheus-dr/test-multibranch/statuses/$GIT_COMMIT?access_token=$TOKEN" \
          -H "Content-Type: application/json" \
          -X POST \
          -d "{\"state\": \"success\", \"context\": \"continuous-integration/jenkins\", \"description\": \"Jenkins\", \"target_url\": \"$JENKINS_URL/job/$JOB_NAME/$BUILD_NUMBER/console\"}"
      '''
    }

    failure {
      sh '''
        set +x
        curl "https://api.GitHub.com/repos/matheus-dr/test-multibranch/statuses/$GIT_COMMIT?access_token=$TOKEN" \
          -H "Content-Type: application/json" \
          -X POST \
          -d "{\"state\": \"failure\", \"context"\: \"continuous-integration/jenkins\", \"description\": \"Jenkins\", \"target_url\": \"$JENKINS_URL/job/$JOB_NAME/$BUILD_NUMBER/console\"}"
      '''
    }
  }
}