pipeline {
  agent any

  options {
    buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')
    disableConcurrentBuilds()
  }

  triggers {
    GenericTrigger (
      genericVariables: [
        [key: 'pushRef', value: '$.ref', defaultValue: ''],
        [key: 'mergeRef', value: '$.base.ref', defaultValue: ''],
        [key: 'mergeIsGoingToDeploy', value: '$.pull_request.merged', defaultValue: 'false'],
        [key: 'mergeAction', value: '$.action', defaultValue: '']
      ],
      token: 'proesc-backend'
    )
  }

  stages {
    stage('Checkout SCM') {
      steps {
        checkout([
          $class: 'GitSCM',
          branches: [[name: '*/develop'], [name: '*/release*'], [name: '*/main']],
          extensions: [[$class: 'CleanCheckout']],
          doGenerateSubmoduleConfigurations: false,
          submoduleCfg: [],
          userRemoteConfigs: [[credentialsId: 'proesc-ssh-key', url: 'git@github.com:matheus-dr/test-multibranch.git']]
        ])
      }
    }

    stage('Setup') {
      steps {
        script {
          // Defining vars to use in script
          def mergeIsGoingToDeploy = env.mergeIsGoingToDeploy
          def mergeRef = env.mergeRef
          def pushRef = env.pushRef
          def action = env.action

          // Checking if is going to deploy based on merge or push
          env.isGoingToDeploy = mergeIsGoingToDeploy ?: pushRef != ''

          // Validation of dev environment
          env.devCiCd = (
            mergeRef == 'refs/head/develop' && (action == 'opened' || action == 'merged')
          ) || (pushRef == 'refs/head/develop')

          // Validation of qa environment
          env.qaCiCd = (
            mergeRef ==~ /refs\/head\/release.*$/ && (action == 'opened' || action == 'merged')
          ) || (pushRef ==~ /refs\/head\/release.*$/)

          // Validation of prod environment
          env.prodCiCd = (
            mergeRef == 'refs/head/main' && (action == 'opened' || action == 'merged')
          ) || (pushRef == 'refs/head/main')
        }
      }
    }

    stage('Debug') {
      steps {
        script {
          echo((env.mergeRef == 'refs/head/develop' && (action == 'opened' || action == 'merged')).toString())
          echo((env.pushRef == 'refs/head/develop').toString())
          echo((env.pushRef ==~ /refs\/head\/release.*$/).toString())
          echo((env.mergeIsGoingToDeploy ?: env.pushRef != '').toString())
        }
      }
    }

    stage('Dev Environment') {
      steps {
        build job: 'proesc-backend/ci-dev',
          parameters: [booleanParam(name: 'isGoingToDeploy', value: isGoingToDeploy)],
          wait: false,
          propagate: false
      }

      when {
        expression {
          return env.devCiCd
        }
      }
    }

    stage('Qa Environment') {
      steps {
        // TODO: Change job to correct pipeline
        build job: 'proesc-backend/ci-dev',
          parameters: [booleanParam(name: 'isGoingToDeploy', value: isGoingToDeploy)],
          wait: false,
          propagate: false
      }

      when {
        expression {
          return env.qaCiCd
        }
      }
    }

    stage('Prod Environment') {
      steps {
        // TODO: Change job to correct pipeline
        build job: 'proesc-backend/ci-dev',
          parameters: [booleanParam(name: 'isGoingToDeploy', value: isGoingToDeploy)],
          wait: false,
          propagate: false
      }

      when {
        anyOf {
          expression {
            return env.prodCiCd
          }
        }
      }
    }
  }
}