pipeline {
  agent any

  environment {
    // Name of the folder containing the jobs
    projectName = 'proesc-backend'

    // Name of the credentials id to connect to git
    sshKey = 'proesc-ssh-key'

    // App registry in ECR
    appRegistry = '607751015014.dkr.ecr.sa-east-1.amazonaws.com/proesc-backend'
  }

  options {
    buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')
    disableConcurrentBuilds()
  }

  parameters {
    booleanParam(name: 'isGoingToDeploy', defaultValue: false)
  }

  stages {
    stage('Checkout SCM') {
      steps {
        checkout([
          $class: 'GitSCM',
          branches: [[name: '*/develop']],
          extensions: [[$class: 'CleanCheckout']],
          doGenerateSubmoduleConfigurations: false,
          submoduleCfg: [],
          userRemoteConfigs: [[credentialsId: sshKey, url: GIT_URL]]
        ])
      }
    }

    stage('Cleaning old dependencies and cache') {
      steps {
        sh 'composer clearcache'
        sh 'rm -rf vendor/*'
      }
    }

    stage('Installing dependencies') {
      steps {
        sh 'composer install'
      }
    }

    stage('Building image with docker') {
      steps {
        sh "docker build -t ${env.appRegistry}:dev-latest ."
      }
    }

    stage('Testing project') {
      steps {
        sh './vendor/bin/phpunit'
      }
    }

    stage('Enable CD') {
      steps {
        build job: "${env.projectName}/cd-dev",
          wait: false,
          propagate: false
      }

      when {
        expression {
          return params.isGoingToDeploy
        }
      }
    }
  }
}