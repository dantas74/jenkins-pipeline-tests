pipeline {
  agent any

  options {
    buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')
    disableConcurrentBuilds()
  }

  parameters {
    string(name: 'branchName', defaultValue: '')
  }

  stages {
    stage('Checkout SCM') {
      steps {
        checkout([
          $class: 'GitSCM',
          branches: [[name: "*/develop"]],
          extensions: [[$class: 'CleanCheckout']],
          doGenerateSubmoduleConfigurations: false,
          submoduleCfg: [],
          userRemoteConfigs: [[credentialsId: 'proesc-ssh-key', url: 'git@github.com:matheus-dr/test-multibranch.git']]
        ])
      }
    }

    stage('Merging branch into develop') {
      steps {
        // This is made to get these repositories in local
        sh "git checkout ${params.branchName} && git checkout develop"

        // This is made to delete last merge-branch of previous result
        sh 'git branch | grep merge-branch > ./tmp.txt; if [[ "$(< ./tmp.txt)" == "  merge-branch" ]]; then git branch -d merge-branch; fi; rm -rf ./tmp.txt'

        // This creates a new version simulating the dev branch with changes proposed in PR
        sh 'git checkout -b merge-branch'
        sh "git merge ${params.branchName}"
      }
    }

    stage('Testing CI for auxiliary branch') {
      steps {
        echo 'Hello world'
      }
    }
  }
}